#!/usr/bin/env python3
"""
Build script espec√≠fico para Windows - compila execut√°vel e instalador NSIS
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_requirements():
    """Verifica se todos os requisitos est√£o instalados."""
    print("üîç Verificando requisitos...")

    # Verificar Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False

    print("‚úÖ Python OK")

    # Verificar PyInstaller
    try:
        import PyInstaller
        print("‚úÖ PyInstaller OK")
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyinstaller'])
        print("‚úÖ PyInstaller instalado")

    # Verificar NSIS
    try:
        result = subprocess.run(['makensis', '/VERSION'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ NSIS OK - {result.stdout.strip()}")
        else:
            print("‚ùå NSIS n√£o encontrado ou com erro")
            print("üí° Baixe e instale o NSIS de: https://nsis.sourceforge.io/Download")
            return False
    except FileNotFoundError:
        print("‚ùå NSIS n√£o encontrado no PATH")
        print("üí° Baixe e instale o NSIS de: https://nsis.sourceforge.io/Download")
        print("üí° Certifique-se de adicionar ao PATH do sistema")
        return False

    return True

def create_resources():
    """Cria recursos necess√°rios para o instalador."""
    print("üé® Criando recursos...")

    resources_dir = Path("resources")
    resources_dir.mkdir(exist_ok=True)

    # Criar √≠cone simples (placeholder se n√£o existir)
    icon_path = resources_dir / "icon.ico"
    if not icon_path.exists():
        print("üí° Criando √≠cone placeholder...")
        # Este seria um √≠cone real em produ√ß√£o
        with open(icon_path, 'w') as f:
            f.write("# Placeholder para √≠cone")

    print("‚úÖ Recursos preparados")

def build_executable():
    """Compila o execut√°vel usando PyInstaller."""
    print("üî® Compilando execut√°vel...")

    # Limpar builds anteriores
    for dir_name in ['build', 'dist']:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üßπ Removido diret√≥rio {dir_name}")

    # Comando PyInstaller
    cmd = [
        sys.executable, '-m', 'PyInstaller',
        '--onefile',
        '--windowed',
        '--name=UniversalConverter',
        '--add-data=ui;ui',
        '--add-data=converters;converters',
        '--add-data=utils;utils',
        '--hidden-import=PyQt5.QtCore',
        '--hidden-import=PyQt5.QtGui',
        '--hidden-import=PyQt5.QtWidgets',
        '--hidden-import=PIL',
        '--hidden-import=PIL.Image',
        'main.py'
    ]

    # Adicionar √≠cone se existir
    icon_path = Path("resources/icon.ico")
    if icon_path.exists():
        cmd.extend(['--icon=resources/icon.ico'])

    print("üîÑ Executando PyInstaller...")
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Execut√°vel compilado com sucesso!")

        # Mostrar tamanho do arquivo
        exe_path = Path("dist/UniversalConverter.exe")
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üìè Tamanho: {size_mb:.1f} MB")

        return True

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao compilar execut√°vel:")
        print(e.stderr)
        return False

def build_installer():
    """Compila o instalador NSIS."""
    print("üì¶ Compilando instalador NSIS...")

    # Verificar se o execut√°vel existe
    exe_path = Path("dist/UniversalConverter.exe")
    if not exe_path.exists():
        print("‚ùå Execut√°vel n√£o encontrado! Execute build_executable() primeiro.")
        return False

    # Compilar com NSIS
    cmd = ['makensis', '/V3', 'installer.nsi']

    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Instalador compilado com sucesso!")

        # Mostrar informa√ß√µes do instalador
        installer_path = Path("UniversalConverter-1.0.0-Setup.exe")
        if installer_path.exists():
            size_mb = installer_path.stat().st_size / (1024 * 1024)
            print(f"üìè Tamanho do instalador: {size_mb:.1f} MB")
            print(f"üìÅ Localiza√ß√£o: {installer_path.absolute()}")

        return True

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao compilar instalador:")
        print(e.stdout)
        print(e.stderr)
        return False

def main():
    """Fun√ß√£o principal de build."""
    print("üöÄ Universal Converter - Build para Windows")
    print("=" * 50)

    # Verificar se estamos no diret√≥rio correto
    if not Path("main.py").exists():
        print("‚ùå main.py n√£o encontrado!")
        print("üí° Execute este script no diret√≥rio raiz do projeto")
        sys.exit(1)

    # Verificar requisitos
    if not check_requirements():
        print("\n‚ùå Requisitos n√£o atendidos. Instala√ß√£o cancelada.")
        input("Pressione Enter para sair...")
        sys.exit(1)

    print()

    # Criar recursos
    create_resources()
    print()

    # Compilar execut√°vel
    if not build_executable():
        print("\n‚ùå Falha ao compilar execut√°vel!")
        input("Pressione Enter para sair...")
        sys.exit(1)

    print()

    # Compilar instalador
    if not build_installer():
        print("\n‚ùå Falha ao compilar instalador!")
        input("Pressione Enter para sair...")
        sys.exit(1)

    print()
    print("üéâ Build completo!")
    print("=" * 30)
    print("‚úÖ Execut√°vel: dist/UniversalConverter.exe")
    print("‚úÖ Instalador: UniversalConverter-1.0.0-Setup.exe")
    print()
    print("üìã Pr√≥ximos passos:")
    print("1. Teste o execut√°vel em diferentes vers√µes do Windows")
    print("2. Teste o instalador em m√°quinas limpas")
    print("3. Considere assinar digitalmente o instalador para produ√ß√£o")
    print("4. Distribua o instalador!")
    print()
    input("Pressione Enter para sair...")

if __name__ == '__main__':
    main()